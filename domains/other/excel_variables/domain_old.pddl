(define (domain excel)
	(:requirements :typing)
	(:types
		limiter - char
		input output - string
		string index char variable
	)
	(:constants i0 i1 - index)
	(:predicates
		(variable-assignment ?var - variable ?str - input)
		(assignment ?str - string ?ix - index ?ch - char)
		(loindex ?str - input ?ix - index)
		(hiindex ?str - input ?ix - index)
		(size ?str - string ?ix - index)
		(empty ?var - variable)
		(next ?ix1 ?ix2 - index)
	)

	(:action append-char
		:parameters (?str - output ?ch - limiter)
		:precondition ()
		:effect (and (forall (?ix1 ?ix2 - index)
		                     (when (and (size ?str ?ix1) (next ?ix1 ?ix2))
		                           (and (not (size ?str ?ix1)) (size ?str ?ix2) (assignment ?str ?ix1 ?ch))
		                     )
		             )
		        )
	)

	(:action append-str
		:parameters (?var - variable ?str - output)
		:precondition ()
		:effect (and (forall (?ix1 ?ix2 - index ?ch - char ?inp - input)
		                     (when (and (size ?str ?ix1) (variable-assignment ?var ?inp) (loindex ?inp ?ix2) (assignment ?inp ?ix2 ?ch))
		                           (and (assignment ?str ?ix1 ?ch))
		                     )
		             )
		             (forall (?ix1 ?ix2 - index)
		                     (when (and (size ?str ?ix1) (next ?ix1 ?ix2))
		                           (and (not (size ?str ?ix1)) (size ?str ?ix2))
		                     )
		             )
		        )
	)

	(:action inc-loindex
		:parameters (?var - variable)
		:precondition ()
		:effect (and (forall (?ix1 ?ix2 - index ?inp - input)
		                     (when (and (variable-assignment ?var ?inp) (loindex ?inp ?ix1) (next ?ix1 ?ix2))
		                           (and (not (loindex ?inp ?ix1)) (loindex ?inp ?ix2))
		                     )
		             )
		        )
	)

	(:action get-prefix
		:parameters (?var - variable ?ch - limiter)
		:precondition ()
		:effect (and (forall (?ix1 - index ?inp - input)
		                     (when (variable-assignment ?var ?inp)
		                           (and (not (loindex ?inp ?ix1)) (not (hiindex ?inp ?ix1)))
		                     )
		             )
		             (forall (?inp - input)
		                     (when (variable-assignment ?var ?inp)
		                           (loindex ?inp i0)
		                     )
		             )
		             (forall (?ix1 - index ?inp - input)
		                     (when (and (variable-assignment ?var ?inp) (assignment ?inp ?ix1 ?ch))
		                           (and (hiindex ?inp ?ix1))
		                     )
		             )
		        )
	)

	(:action get-suffix
		:parameters (?var - variable ?ch - limiter)
		:precondition ()
		:effect (and (forall (?ix1 - index ?inp - input)
		                     (when (variable-assignment ?var ?inp)
		                           (and (not (loindex ?inp ?ix1)) (not (hiindex ?inp ?ix1)))
		                     )
		             )
		             (forall (?ix1 ?ix2 - index ?inp - input)
		                     (when (and (variable-assignment ?var ?inp) (assignment ?inp ?ix1 ?ch) (next ?ix1 ?ix2))
		                           (and (loindex ?inp ?ix2))
		                     )
		             )
		             (forall (?ix1 - index ?inp - input)
		                     (when (and (variable-assignment ?var ?inp) (size ?inp ?ix1))
		                           (and (hiindex ?inp ?ix1))
		                     )
		             )
		        )
	)

	(:action get-substr
		:parameters (?var - variable ?ch1 ?ch2 - limiter)
		:precondition ()
		:effect (and (forall (?ix1 - index ?inp - input)
		                     (when (variable-assignment ?var ?inp)
		                           (and (not (loindex ?inp ?ix1)) (not (hiindex ?inp ?ix1)))
		                     )
		             )
		             (forall (?ix1 ?ix2 - index ?inp - input)
		                     (when (and (variable-assignment ?var ?inp) (assignment ?inp ?ix1 ?ch1) (next ?ix1 ?ix2))
		                           (and (loindex ?inp ?ix2))
		                     )
		             )
		             (forall (?ix1 - index ?inp - input)
		                     (when (and (variable-assignment ?var ?inp) (assignment ?inp ?ix1 ?ch2))
		                           (and (hiindex ?inp ?ix1))
		                     )
		             )
		        )
	)

	(:derived (empty ?var - variable)
		(exists (?ix - index ?inp - input)
		        (and (variable-assignment ?var ?inp) (loindex ?inp ?ix) (hiindex ?inp ?ix))
		)
	)
)
