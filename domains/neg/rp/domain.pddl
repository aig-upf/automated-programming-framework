(define (domain robopainter)
	(:requirements :typing)
	(:types index letter)
	(:constants a b empty - letter)
	(:predicates
		(at ?i - index)
		(adjacent ?i1 ?i2 - index)
		(painted-black ?i - index )
		(white-cell ?i - index)
		(last ?i - index)
		(last-cell)
		(not-last-cell)
		;(in-white-cell)
		;(has-adjacent)
	)


	(:action paint
		:parameters ()
		:precondition (and ) 
		:effect (and ( forall ( ?i1 - index ) 
						( when  (and ( at ?i1 )(white-cell ?i1) )
								(and (not (white-cell ?i1))( painted-black ?i1 ) )
						)
					 )
				)
	)
	
	(:action inc
		:parameters ()
		:precondition (and ) 
		:effect (and ( forall (?i1 ?i2 - index ) 
						( when  (and ( adjacent ?i1 ?i2 ) ( at ?i1 ) )
								(and ( not (at ?i1) ) (at ?i2) )
						)
					 )
				)
	)
	(:derived (last-cell)
		(exists (?i - index) (and (at ?i)(last ?i) ))
	)
	(:derived (not-last-cell)
		(exists (?i - index) (and (at ?i)(not (last ?i)) ))
	)
	;(:derived (in-white-cell)
	;	(exists (?i - index) (and (at ?i)(white-cell ?i) ))
	;)
	;(:derived (has-adjacent)
	;	(exists (?i1 ?i2 - index) (and (at ?i1)(adjacent ?i1 ?i2)))
	;)
)
