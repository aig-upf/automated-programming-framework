INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python /home/jsegovia/Desktop/automated-programming-framework-private/PLANNERS/fast-downward/builds/release32/bin/translate/translate.py domain.pddl ins.pddl --sas-file output.sas
Parsing...
Parsing: [0.080s CPU, 0.079s wall-clock]
Normalizing task... [0.010s CPU, 0.005s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.004s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.050s CPU, 0.044s wall-clock]
Preparing model... [0.020s CPU, 0.021s wall-clock]
Generated 1832 rules.
Computing model... [0.030s CPU, 0.034s wall-clock]
1172 relevant atoms
1748 auxiliary atoms
2920 final queue length
5352 total queue pushes
Completing instantiation... [0.040s CPU, 0.039s wall-clock]
Instantiating: [0.140s CPU, 0.146s wall-clock]
Computing fact groups...
Finding invariants...
136 initial candidates
Finding invariants: [15.610s CPU, 15.605s wall-clock]
Checking invariant weight... [0.000s CPU, 0.001s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
185 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [15.620s CPU, 15.610s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.003s wall-clock]
Translating task: [0.060s CPU, 0.060s wall-clock]
391 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
6 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.021s wall-clock]
Reordering and filtering variables...
198 of 201 variables necessary.
55 of 64 mutex groups necessary.
877 of 877 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.012s wall-clock]
Translator variables: 198
Translator derived variables: 0
Translator facts: 467
Translator goal facts: 1
Translator mutex groups: 55
Translator total mutex groups size: 158
Translator operators: 877
Translator axioms: 0
Translator task size: 7073
Translator peak memory: 364960 KB
Writing output... [0.010s CPU, 0.009s wall-clock]
Done! [15.950s CPU, 15.945s wall-clock]

translate exit code: 0
INFO     Running search (release32).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/jsegovia/Desktop/automated-programming-framework-private/PLANNERS/fast-downward/builds/release32/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_rhw(reasonable_orders=true),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
reading input... [t=2.0261e-05s]
done reading input! [t=0.00713348s]
Initializing landmarks count heuristic...
Initializing Exploration...
Generating landmarks using the RPG/SAS+ approach
approx. reasonable orders
approx. obedient reasonable orders
Removed 0 reasonable or obedient reasonable orders
Landmarks generation time: 0.004846s
Discovered 13 landmarks, of which 0 are disjunctive and 0 are conjunctive 
36 edges
Simplifying 2772 unary operators... done! [1265 unary operators]
Initializing additive heuristic...
Initializing FF heuristic...
Building successor generator...done! [t=0.0155567s]
peak memory difference for successor generator creation: 0 KB
time for successor generation creation: 0.000227664s
Variables: 198
FactPairs: 467
Bytes per state: 32
Conducting lazy best first search, (real) bound = 2147483647
5 initial landmarks, 1 goal landmarks
New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 8
New best heuristic value for ff(transform = adapt_costs(one)): 12
[g=0, 1 evaluated, 0 expanded, t=0.0156805s, 5040 KB]
Initial heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 8
Initial heuristic value for ff(transform = adapt_costs(one)): 12
New best heuristic value for ff(transform = adapt_costs(one)): 10
[g=1, 2 evaluated, 1 expanded, t=0.0158065s, 5040 KB]
New best heuristic value for ff(transform = adapt_costs(one)): 9
[g=2, 3 evaluated, 2 expanded, t=0.015868s, 5040 KB]
New best heuristic value for ff(transform = adapt_costs(one)): 8
[g=1, 7 evaluated, 5 expanded, t=0.0160643s, 5040 KB]
New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 7
New best heuristic value for ff(transform = adapt_costs(one)): 7
[g=2, 8 evaluated, 6 expanded, t=0.0161243s, 5040 KB]
New best heuristic value for ff(transform = adapt_costs(one)): 6
[g=7, 2363 evaluated, 1627 expanded, t=0.0931518s, 5964 KB]
New best heuristic value for ff(transform = adapt_costs(one)): 5
[g=8, 2364 evaluated, 1628 expanded, t=0.0932136s, 5964 KB]
New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 5
[g=9, 2365 evaluated, 1629 expanded, t=0.0932649s, 5964 KB]
New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 4
New best heuristic value for ff(transform = adapt_costs(one)): 4
[g=22, 2851 evaluated, 2007 expanded, t=0.105579s, 6100 KB]
New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 3
New best heuristic value for ff(transform = adapt_costs(one)): 3
[g=30, 2859 evaluated, 2015 expanded, t=0.105801s, 6100 KB]
New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 2
New best heuristic value for ff(transform = adapt_costs(one)): 2
[g=40, 2869 evaluated, 2025 expanded, t=0.106058s, 6100 KB]
New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 1
New best heuristic value for ff(transform = adapt_costs(one)): 1
[g=50, 2879 evaluated, 2035 expanded, t=0.106295s, 6100 KB]
Solution found!
Actual search time: 0.0907082s [t=0.106336s]
program-unstack-0 row-0 (1001)
check-unstack-0-0 row-0 (0)
execute-unstack-0-0 row-0 (1)
program-collect-1 row-0 (1001)
check-collect-0-1 row-0 (0)
execute-collect-0-1 row-0 (1)
program-goto-obs-greenish-2-4 row-0 (1001)
eval-cond-obs-greenish-0-2 row-0 (1)
do-goto-0-2-4 row-0 (1)
program-end-4 row-0 (1)
check-main-end-0-4 row-0 (0)
repeat-end-main-0-4 row-0 (0)
check-unstack-0-0 row-0 (0)
execute-unstack-0-0 row-0 (1)
check-collect-0-1 row-0 (0)
execute-collect-0-1 row-0 (1)
eval-cond-obs-greenish-0-2 row-0 (1)
dont-goto-0-2-4 row-0 (1)
program-goto-clear-3-1 b1 row-0 (1001)
eval-cond-clear-0-3 b1 row-0 (1)
do-goto-0-3-1 row-0 (1)
check-collect-0-1 row-0 (0)
skip-1  (0)
check-unstack-0-0 row-0 (0)
execute-unstack-0-0 row-0 (1)
check-collect-0-1 row-0 (0)
execute-collect-0-1 row-0 (1)
eval-cond-obs-greenish-0-2 row-0 (1)
do-goto-0-2-4 row-0 (1)
check-main-end-2-4 row-0 (0)
skip-2  (0)
check-unstack-0-0 row-0 (0)
execute-unstack-0-0 row-0 (1)
check-collect-0-1 row-0 (0)
execute-collect-0-1 row-0 (1)
eval-cond-obs-greenish-0-2 row-0 (1)
dont-goto-0-2-4 row-0 (1)
eval-cond-clear-0-3 b1 row-0 (1)
do-goto-0-3-1 row-0 (1)
check-collect-0-1 row-0 (0)
skip-3  (0)
check-unstack-0-0 row-0 (0)
execute-unstack-0-0 row-0 (1)
check-collect-0-1 row-0 (0)
execute-collect-0-1 row-0 (1)
eval-cond-obs-greenish-0-2 row-0 (1)
dont-goto-0-2-4 row-0 (1)
eval-cond-clear-0-3 b1 row-0 (1)
do-goto-0-3-1 row-0 (1)
check-collect-0-1 row-0 (0)
skip-4  (0)
Plan length: 51 step(s).
Plan cost: 4031
Expanded 2036 state(s).
Reopened 0 state(s).
Evaluated 2880 state(s).
Evaluations: 4917
Generated 55761 state(s).
Dead ends: 843 state(s).
Number of registered states: 2880
Int hash set load factor: 2880/4096 = 0.703125
Int hash set resizes: 12
Search time: 0.090721s
Total time: 0.106339s
Solution found.
Peak memory: 6100 KB

search exit code: 0
